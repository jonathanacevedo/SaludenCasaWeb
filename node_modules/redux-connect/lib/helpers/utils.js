'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.isPromise = isPromise;
exports.eachComponents = eachComponents;
exports.filterAndFlattenComponents = filterAndFlattenComponents;
exports.filterComponents = filterComponents;
exports.loadAsyncConnect = loadAsyncConnect;
exports.loadOnServer = loadOnServer;

var _matchRoutes = require('react-router-config/matchRoutes');

var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

var _store = require('../store');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tells us if input looks like promise or not
 * @param  {Mixed} obj
 * @return {Boolean}
 */
function isPromise(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) === 'object' && obj && obj.then instanceof Function;
}

/**
 * Utility to be able to iterate over array of promises in an async fashion
 * @param  {Array} iterable
 * @param  {Function} iterator
 * @return {Promise}
 */
var mapSeries = _promise2.default.mapSeries || function promiseMapSeries(iterable, iterator) {
  var length = iterable.length;

  var results = new Array(length);
  var i = 0;

  function iterateOverResults() {
    return iterator(iterable[i], i, iterable).then(function (result) {
      results[i] = result;
      i += 1;
      if (i < length) {
        return iterateOverResults();
      }

      return results;
    });
  }

  return iterateOverResults();
};

/**
 * We need to iterate over all components for specified routes.
 * Components array can include objects if named components are used:
 * https://github.com/rackt/react-router/blob/latest/docs/API.md#named-components
 *
 * @param components
 * @param iterator
 */
function eachComponents(components, iterator) {
  var l = components.length;

  var _loop = function _loop(i) {
    var component = components[i];
    if ((typeof component === 'undefined' ? 'undefined' : (0, _typeof3.default)(component)) === 'object') {
      var keys = (0, _keys2.default)(component);
      keys.forEach(function (key) {
        return iterator(component[key], i, key);
      });
    } else {
      iterator(component, i);
    }
  };

  for (var i = 0; i < l; i += 1) {
    _loop(i);
  }
}

/**
 * Returns flattened array of components that are wrapped with reduxAsyncConnect
 * @param  {Array} components
 * @return {Array}
 */
function filterAndFlattenComponents(components) {
  var flattened = [];
  eachComponents(components, function (component) {
    if (component && component.reduxAsyncConnect) {
      flattened.push(component);
    }
  });
  return flattened;
}

/**
 * Returns an array of components that are wrapped
 * with reduxAsyncConnect
 * @param  {Array} branch
 * @return {Array}
 */
function filterComponents(branch) {
  return branch.reduce(function (result, _ref) {
    var route = _ref.route,
        match = _ref.match;

    if (route.component && route.component.reduxAsyncConnect) {
      result.push([route.component, { route: route, match: match }]);
    }

    return result;
  }, []);
}

/**
 * Function that accepts components with reduxAsyncConnect definitions
 * and loads data
 * @param  {Object} data.routes - static route configuration
 * @param  {String} data.location - location object e.g. { pathname, query, ... }
 * @param  {Function} [data.filter] - filtering function
 * @return {Promise}
 */
function loadAsyncConnect(_ref2) {
  var location = _ref2.location,
      _ref2$routes = _ref2.routes,
      routes = _ref2$routes === undefined ? [] : _ref2$routes,
      _ref2$filter = _ref2.filter,
      filter = _ref2$filter === undefined ? function () {
    return true;
  } : _ref2$filter,
      rest = (0, _objectWithoutProperties3.default)(_ref2, ['location', 'routes', 'filter']);

  var layered = filterComponents((0, _matchRoutes2.default)(routes, location.pathname));

  if (layered.length === 0) {
    return _promise2.default.resolve();
  }

  // this allows us to have nested promises, that rely on each other's completion
  // cycle
  return mapSeries(layered, function (_ref3) {
    var component = _ref3[0],
        routeParams = _ref3[1];

    if (component == null) {
      return _promise2.default.resolve();
    }

    // Collect the results of each component
    var results = [];
    var asyncItemsArr = [];
    var asyncItems = component.reduxAsyncConnect;
    asyncItemsArr.push.apply(asyncItemsArr, asyncItems);

    // get array of results
    results.push.apply(results, asyncItems.reduce(function (itemsResults, item) {
      if (filter(item, component)) {
        var promiseOrResult = item.promise((0, _extends3.default)({}, rest, routeParams, {
          location: location,
          routes: routes
        }));

        if (isPromise(promiseOrResult)) {
          promiseOrResult = promiseOrResult.catch(function (error) {
            return { error: error };
          });
        }

        itemsResults.push(promiseOrResult);
      }

      return itemsResults;
    }, []));

    return _promise2.default.all(results).then(function (finalResults) {
      return finalResults.reduce(function (finalResult, result, idx) {
        var key = asyncItemsArr[idx].key;

        if (key) {
          finalResult[key] = result;
        }

        return finalResult;
      }, {});
    });
  });
}

/**
 * Helper to load data on server
 * @param  {Mixed} args
 * @return {Promise}
 */
function loadOnServer(args) {
  return loadAsyncConnect(args).then(function () {
    args.store.dispatch((0, _store.endGlobalLoad)());
  });
}